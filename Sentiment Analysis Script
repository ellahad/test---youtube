# Python script for sentiment analysis

# Import necessary libraries
import pandas as pd
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from textblob import TextBlob
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import string
import nltk

# Function to clean text
def clean_text(text):
    # Remove HTML tags
    text = BeautifulSoup(text, 'html.parser').get_text()
    # Remove special characters
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    # Convert to lowercase
    text = text.lower()
    return text

# Function to tokenize and remove stopwords
def tokenize_and_remove_stopwords(text):
    # Tokenizing the text into words
    tokens = word_tokenize(text)
    # Removing stopwords
    stop_words = set(stopwords.words('english'))
    filtered_tokens = [word for word in tokens if word.lower() not in stop_words]
    return filtered_tokens

# Function to lemmatize tokens
def lemmatize_tokens(tokens):
    lemmatizer = WordNetLemmatizer()
    return [lemmatizer.lemmatize(token) for token in tokens]


# Function to analyze sentiment using Vader
def analyze_sentiment_vader(text):
    analyzer = SentimentIntensityAnalyzer()
    compound_score = analyzer.polarity_scores(text)['compound']
    if compound_score > 0.05:
        return 'positive'
    elif compound_score < -0.05:
        return 'negative'
    else:
        return 'neutral'

# Sample usage
text = "This is a great product! I love it."
cleaned_text = clean_text(text)
tokens = tokenize_and_remove_stopwords(cleaned_text)
lemmatized_tokens = lemmatize_tokens(tokens)
sentiment_textblob = analyze_sentiment_textblob(cleaned_text)
sentiment_vader = analyze_sentiment_vader(cleaned_text)
print("Sentiment (TextBlob):", sentiment_textblob)
print("Sentiment (Vader):", sentiment_vader)
